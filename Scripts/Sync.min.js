!function (e, n) { "function" == typeof define && define.amd ? define([], n) : "undefined" != typeof module && module.exports ? module.exports = n() : e.WebSockRecon = n() }(this, function () { if ("WebSocket" in window) return e.prototype.onopen = function (e) { }, e.prototype.onclose = function (e) { }, e.prototype.onconnecting = function (e) { }, e.prototype.onmessage = function (e) { }, e.prototype.onerror = function (e) { }, e.debugAll = !1, e.CONNECTING = WebSocket.CONNECTING, e.OPEN = WebSocket.OPEN, e.CLOSING = WebSocket.CLOSING, e.CLOSED = WebSocket.CLOSED, e; function e(n, t, o) { var c = { debug: !1, automaticOpen: !0, reconnectInterval: 1e3, maxReconnectInterval: 3e4, reconnectDecay: 1.5, timeoutInterval: 2e3, maxReconnectAttempts: null, binaryType: "blob" }; o || (o = {}); for (var s in c) void 0 !== o[s] ? this[s] = o[s] : this[s] = c[s]; this.url = n, this.reconnectAttempts = 0, this.readyState = WebSocket.CONNECTING, this.protocol = null; var r, i = this, a = !1, u = !1, d = document.createElement("div"); function l(e, n) { var t = document.createEvent("CustomEvent"); return t.initCustomEvent(e, !1, !1, n), t } d.addEventListener("open", function (e) { i.onopen(e) }), d.addEventListener("close", function (e) { i.onclose(e) }), d.addEventListener("connecting", function (e) { i.onconnecting(e) }), d.addEventListener("message", function (e) { i.onmessage(e) }), d.addEventListener("error", function (e) { i.onerror(e) }), this.addEventListener = d.addEventListener.bind(d), this.removeEventListener = d.removeEventListener.bind(d), this.dispatchEvent = d.dispatchEvent.bind(d), this.open = function (n) { if ((r = new WebSocket(i.url, t || [])).binaryType = this.binaryType, n) { if (this.maxReconnectAttempts && this.reconnectAttempts > this.maxReconnectAttempts) return } else d.dispatchEvent(l("connecting")), this.reconnectAttempts = 0; (i.debug || e.debugAll) && console.debug("WebSockRecon", "attempt-connect", i.url); var o = r, c = setTimeout(function () { (i.debug || e.debugAll) && console.debug("WebSockRecon", "connection-timeout", i.url), u = !0, o.close(), u = !1 }, i.timeoutInterval); r.onopen = function (t) { clearTimeout(c), (i.debug || e.debugAll) && console.debug("WebSockRecon", "onopen", i.url), i.protocol = r.protocol, i.readyState = WebSocket.OPEN, i.reconnectAttempts = 0; var o = l("open"); o.isReconnect = n, n = !1, d.dispatchEvent(o) }, r.onclose = function (t) { if (clearTimeout(c), r = null, a) i.readyState = WebSocket.CLOSED, d.dispatchEvent(l("close")); else { i.readyState = WebSocket.CONNECTING; var o = l("connecting"); o.code = t.code, o.reason = t.reason, o.wasClean = t.wasClean, d.dispatchEvent(o), n || u || ((i.debug || e.debugAll) && console.debug("WebSockRecon", "onclose", i.url), d.dispatchEvent(l("close"))); var c = i.reconnectInterval * Math.pow(i.reconnectDecay, i.reconnectAttempts); setTimeout(function () { i.reconnectAttempts++ , i.open(!0) }, c > i.maxReconnectInterval ? i.maxReconnectInterval : c) } }, r.onmessage = function (n) { (i.debug || e.debugAll) && console.debug("WebSockRecon", "onmessage", i.url, n.data); var t = l("message"); t.data = n.data, d.dispatchEvent(t) }, r.onerror = function (n) { (i.debug || e.debugAll) && console.debug("WebSockRecon", "onerror", i.url, n), d.dispatchEvent(l("error")) } }, 1 == this.automaticOpen && this.open(!1), this.send = function (n) { if (r) return (i.debug || e.debugAll) && console.debug("WebSockRecon", "send", i.url, n), r.send(n); throw "INVALID_STATE_ERR : Pausing to reconnect websocket" }, this.close = function (e, n) { void 0 === e && (e = 1e3), a = !0, r && r.close(e, n) }, this.refresh = function () { r && r.close() } } }); var Sync = { ajax: function (e) { var n, t, o = {}; (o = $.extend({}, { url: "", username: "", password: "", error: function (e) { return e }, success: function (e) { return e }, dataarival: function (e) { return e } }, e)).url = "ws://" + o.url + "/api/WS?user=" + o.username + "&pass=" + o.password, function () { try { (n = new WebSocket(o.url)).onopen = function () { }, n.onmessage = function (e) { if (e.data.includes("UserLoginValidation")) { "function" == typeof o.success && o.success("Api Login"); var c, s = (c = (c = JSON.parse(e.data).UserLoginValidation)[0]).URL + "?key=" + c.AuthKey; (t = new WebSockRecon(s)).onopen = function () { }, t.onerror = function (e) { "function" == typeof o.error && o.error(e) }, t.onclose = function () { }, t.onmessage = function (e) { var n = JSON.parse(e.data); switch (n.Header) { case "Authentication": var c = s + "?key=" + n.Message; t.url = c, "function" == typeof o.success && o.success("Authenticated"); break; case "SendMessage": "function" == typeof o.dataarival && o.dataarival(e.data); break; case "Connection": "function" == typeof o.success && o.success("Connected") } }, n.close() } }, n.onerror = function (e) { "function" == typeof o.error && o.error(e) }, n.onclose = function () { } } catch (e) { } }(), this.send = function (e) { t.send(e) }, this.close = function (e) { t.close() } } };